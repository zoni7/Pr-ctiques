package pract4;

import java.util.Scanner;
import java.util.*;
/**
 * Classe TimeInstant.
 * Aquesta classe permet representar instants o marques de temps
 * (<code>Timestamp</code>) amb detall de hores i minuts. Així,
 * aquesta classe representa el moment que defineix un instant de
 * temps, en aquest cas, les hores i els minuts d'un dia qualsevol.
 * </p>
 *
 *  @author IIP. Grau en Informàtica. ETSINF, UPV
 *  @version Curs 2019-20
 */
public class TimeInstant {
    // ATRIBUTS:
    /** Variable entera per emmagatzemar les hores.
    *  Ha de pertanyer al rang <code>[0..23]</code>. */
    /* COMPLETAR */
    private int hours;
    /** Variable entera per emmagatzemar els minuts.
    *  Ha de pertanyer al rang <code>[0..59]</code>. */
    /* COMPLETAR */
    private int minutes;
    
    // CONSTRUCTORS:
    /**
    *  Crea un <code>TimeInstant</code> amb el valor de
    *  les hores i els minuts que rep com arguments,
    *  <code>iniHours</code> i <code>iniMinutes</code>,
    *  respectivament.
    *  <p> Ha de complir-se la precondició:
    *  <code>0 <= iniHours < 24, 0 <= iniMinutes < 60</code>. </p>
    */
    /* COMPLETAR */
    public TimeInstant(int iniHours , int iniMinutes){
        if (0 <= iniHours && iniHours < 24){
        hours = iniHours;
    }
    
        if (0<= iniMinutes && iniMinutes < 60){
            minutes = iniMinutes;
        }
    }
   
    
    
    /**
    * Crea un <code>TimeInstant</code> amb el valor de l'instant
    * actual UTC (temps universal coordinat).
    */
    /* COMPLETAR */
   
    public TimeInstant( ){
    long minTotals = System.currentTimeMillis()/(60*1000);
    int minActuals = (int)(minTotals % (24*60));
    
    //hours calcula les hores dividint entre 60
    this.hours = minActuals/60 ;
    
    this.minutes = minActuals % 60;

    }
    
   
    // CONSULTORS I MODIFICADORS:
    /** Torna les hores del TimeInstant. */
    /* COMPLETAR */
    public int getHours(){
     
    return hours;   
    }
    /** Torna els minuts del TimeInstant. */
    /* COMPLETAR */
    public int getMinutes(){
     
    return minutes;   
    }
    
    /** Actualitza les hores del TimeInstant. */
    /* COMPLETAR */
    public void setHours(int intHours){
    hours = intHours;
    }
    
   
   
    /** Actualitza els minuts del TimeInstant. */
    /* COMPLETAR */
    
    public void setMinutes(int intMinutes){
    minutes = intMinutes;
    }
   
    // ALTRES METODES:
    /** Torna el TimeInstant en el format "<code>hh:mm</code>". */
    /* COMPLETAR */
    public String toString(){
    String hh = "0" + this.hours;    //getHours();
    String mm = "0" + this.minutes;  //hetMinutes(); CREC QUE ES POT FER TAMBÉ EMB GET I NO AMB THIS...
    
    // ACÍ ES  MIRA QUE TINGA SOLS DOS DIGITS
    String hhh=hh.substring(hh.length()-2);
    String mmm=mm.substring(mm.length()-2);
    // IMPRIMIM LA  STRING
    String res = hhh + ":" + mmm;
    
    return res;
    
    
    }
    
   
    /** Torna <code>true</code> sii <code>o</code> és
    *  un objecte de la classe <code>TimeInstant</code>
    *  i les seues hores i minuts coincideixen amb els
    *  de l'objecte en curs.
    */
    /* COMPLETAR */
    
    
    public boolean equals(Object o){
    
    return o instanceof TimeInstant
    && this.hours == ((TimeInstant)o).hours
    && this.minutes == ((TimeInstant)o).minutes;
    
    }
    
    
    /** Torna el número de minuts transcorreguts des de les 00:00
    *  fins l'instant representat per l'objecte en curs.
    */
    /* COMPLETAR */
    
    public int toMinutes(){
        int res = getHours()*60 + getMinutes();
        return res;
     
    }
    
    /** Compara cronològicament l'instant de l'objecte en curs
    *  amb el de l'objecte de la classe <code>TimeInstant</code>
    *  referenciat per <code>tInstant</code>.
    *  <p>
    *  El resultat és la resta entre la conversió a minuts dels
    *  dos objectes, en particular, aquest resultat serà un valor:
    *  <ul>
    *   <li> negatiu si l'instant de l'objecte en curs
    *   és anterior al de <code>tInstant</code>, </li>
    *   <li> zero si són iguals, </li>
    *   <li> positiu si l'Instant de l'objecte en curs
    *   és posterior al de l'<code>tInstant</code>. </li>
    *  </ul>
    *  </p>
    */    
    /* COMPLETAR */
        public int compareTo(TimeInstant tInstant){
          int resultThis = this.minutes + this.hours*60;
          int resultInstant = tInstant.minutes + tInstant.hours*60;
          int res = resultThis - resultInstant;
          
         return res;
        }
    // ACTIVITAT EXTRA:
    /** Torna un <code>TimeInstant</code> a partir de la descripció
    *  textual (<code>String</code>) en format "<code>hh:mm</code>".
    */
    /* COMPLETAR */
 public static void main (String[] args){
    
    Scanner teclat = new Scanner(System.in);
 
    System.out.println("Introduisca l'hora: ");
    int hor = teclat.nextInt();
    System.out.println("Introduisca els minuts: ");
    int min = teclat.nextInt();
    TimeInstant  t = new TimeInstant(hor, min);
    TimeInstant t2 = new TimeInstant();
    
    String s1 = t.toString();
    String s2 = t2.toString();
    //IMPRIMIX L'HORA QUE POSEM NOSALTES
    System.out.println(s1);
    //IMPRIMIX L'HORA ACTUAL
    System.out.println("L'hora actual és: " + s2);
    
    
    //CALCULEM LA DIFERÈNCIA HORARIA ENTRE UN I L'ALTRE
    int s3 = Math.abs((t.minutes+ t.hours*60) - (t2.minutes+t2.hours*60)); 
    System.out.println("La diferència horaria entre la teua hora i l'actual és: " + s3 + " minuts");
    
    
    
    // PROVES MEUES AMB EL COMPARETO
    /*int s3 = s1.compareTo(s2);
     System.out.println(s3);
    */
    }
}
